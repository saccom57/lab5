#include "msp430.h"

#define CALADC_15V_30C  *((unsigned int *)0x1A1A)

#define CALADC_15V_85C  *((unsigned int *)0x1A1C)

volatile float temp;
volatile float IntDegF;
volatile float IntDegC;

int led1_dutycycle = 0;
int led2_dutycycle = 0;
int calibratedADC = 500;
int period = 100;
int counter = 0;
int deadzone = 5;
int runningAvg = 500;


#if defined(__TI_COMPILER_VERSION__)
#pragma PERSISTENT(lightsensor_ADC_Result)
#elif defined(__IAR_SYSTEMS_ICC__)
__persistent
#endif
unsigned int lightsensor_ADC_Result = 0;

int main(void)
{    WDTCTL = WDTPW | WDTHOLD;

TB0CCTL0 |= CCIE;
TB0CCR0 = 65535;
TB0CTL = TBSSEL__ACLK | MC__UP;


ADCCTL0 |= ADCSHT_8 | ADCON;
ADCCTL1 |= ADCSHP;
ADCCTL2 &= ~ADCRES;
ADCCTL2 |= ADCRES_2;
ADCMCTL0 |= ADCSREF_1 | ADCINCH_12;
ADCIE |=ADCIE0;


PMMCTL0_H = PMMPW_H;
PMMCTL2 |= INTREFEN | TSENSOREN | REFVSEL_0;
__delay_cycles(400);

__bis_SR_register(LPM0_bits | GIE);
__no_operation();
}

void lightsensor() {

    lightsensor_init_GPIO();
    lightsensor_init_LED_PWM();
    lightsensor_init_SACOA();
    lightsensor_init_ADC();

    while(mode == LIGHTSENSOR_MODE){
        __bis_SR_register(LPM0_bits + GIE);

        runningAvg = (( runningAvg * 9 ) + lightsensor_ADC_Result)/10;
        int diff = (runningAvg - calibratedADC)/4;

        if (diff < deadzone) {
            diff *= -1;
            led1_dutycycle = diff - deadzone;
            led2_dutycycle = 0;
        }
        else if (diff > deadzone) {
            led1_dutycycle = 0;
            led2_dutycycle = diff - deadzone;
        }
        else {
            led1_dutycycle = 0;
            led2_dutycycle = 0;
        }
    }
}

#if defined(__TI_COMPILER_VERSION__) || defined(__IAR_SYSTEMS_ICC__)
#pragma vector=ADC_VECTOR
__interrupt void ADC_ISR(void)
#elif defined(__GNUC__)
void __attribute__ ((interrupt(ADC_VECTOR))) ADC_ISR (void)
#else
#error Compiler not supported!
#endif
{
    switch(__even_in_range(ADCIV,ADCIV_ADCIFG))
    {
        case ADCIV_NONE:
            break;
        case ADCIV_ADCOVIFG:
            break;
        case ADCIV_ADCTOVIFG:
            break;
        case ADCIV_ADCHIIFG:
            break;
        case ADCIV_ADCLOIFG:
            break;
        case ADCIV_ADCINIFG:
            break;
        case ADCIV_ADCIFG:
            temp = ADCMEM0;
            // Celsius

            IntDegC = (temp-CALADC_15V_30C)*(85-30)/(CALADC_15V_85C-CALADC_15V_30C)+30;

            // Fahrenheit

            IntDegF = 9*IntDegC/5+32;
            break;
        default:
            break;
    }
}


#if defined(__TI_COMPILER_VERSION__) || defined(__IAR_SYSTEMS_ICC__)
#pragma vector = TIMER0_B0_VECTOR
__interrupt void Timer_B (void)
#elif defined(__GNUC__)
void __attribute__ ((interrupt(TIMER0_B0_VECTOR))) Timer_B (void)
#else
#error Compiler not supported!
#endif
{
    ADCCTL0 |= ADCENC | ADCSC;
}

void lightsensor_init_GPIO(void) {
    P1DIR |= 0xFF;
    P1OUT = 0x00;
    P3DIR |= 0xFF;
    P3OUT = 0x00;
    P6DIR |= 0xFF;
    P6OUT = 0x00;
    P4DIR &= (~BIT1);
    P4OUT |= BIT1;
    P4REN |= BIT1;
    P4IES |= BIT1;
    P4IFG &= ~BIT1;
    P4IE |= BIT1;
}


void lightsensor_init_LED_PWM(void) {
    Timer_B_initUpModeParam param = {0};
    param.clockSource = TIMER_B_CLOCKSOURCE_ACLK;
    param.clockSourceDivider = TIMER_B_CLOCKSOURCE_DIVIDER_1;
    param.timerPeriod = 1;
    param.timerInterruptEnable_TBIE = TIMER_B_TBIE_INTERRUPT_DISABLE;
    param.captureCompareInterruptEnable_CCR0_CCIE =
        TIMER_B_CCIE_CCR0_INTERRUPT_ENABLE;
    param.startTimer = true;
    Timer_B_initUpMode(TIMER_B0_BASE, &param);
}

void lightsensor_disable_LED_PWM(void) {
    Timer_B_stop(TIMER_B0_BASE);
}
void lightsensor_init_SACOA(void) {
    GPIO_setAsPeripheralModuleFunctionInputPin(GPIO_PORT_P3,
                                               GPIO_PIN1 | GPIO_PIN3 | GPIO_PIN2,
                                               GPIO_TERNARY_MODULE_FUNCTION);
    SAC_OA_init(SAC2_BASE, SAC_OA_POSITIVE_INPUT_SOURCE_EXTERNAL,
                SAC_OA_NEGATIVE_INPUT_SOURCE_EXTERNAL);
    SAC_OA_selectPowerMode(SAC2_BASE, SAC_OA_POWER_MODE_LOW_SPEED_LOW_POWER);
    SAC_OA_enable(SAC2_BASE);
    SAC_enable(SAC2_BASE);


    SAC_OA_init(SAC0_BASE, SAC_OA_POSITIVE_INPUT_SOURCE_PAIR_OA,
                SAC_OA_NEGATIVE_INPUT_SOURCE_PGA);

    SAC_OA_enable(SAC0_BASE);                  // Enable SAC0 OA
    SAC_enable(SAC0_BASE);                     // Enable SAC0
}

void lightsensor_init_ADC(void) {

    ADC_init(ADC_BASE,
             ADC_SAMPLEHOLDSOURCE_2,
             ADC_CLOCKSOURCE_ADCOSC,
             ADC_CLOCKDIVIDER_1);

    ADC_enable(ADC_BASE);

    ADC_setupSamplingTimer(ADC_BASE,
                           ADC_CYCLEHOLD_16_CYCLES,
                           ADC_MULTIPLESAMPLESDISABLE);

    ADC_setResolution(ADC_BASE,
                      ADC_RESOLUTION_12BIT);

    ADC_configureMemory(ADC_BASE,
                        ADC_INPUT_VEREF_P,
                        ADC_VREFPOS_AVCC,
                        ADC_VREFNEG_AVSS);

    ADC_clearInterrupt(ADC_BASE,
                       ADC_COMPLETED_INTERRUPT);


    ADC_enableInterrupt(ADC_BASE,
                        ADC_COMPLETED_INTERRUPT);

    Timer_B_outputPWMParam param2 = {0};
    param2.clockSource = TIMER_B_CLOCKSOURCE_ACLK;
    param2.clockSourceDivider = TIMER_B_CLOCKSOURCE_DIVIDER_1;
    param2.timerPeriod = TIMER_PERIOD;
    param2.compareRegister = TIMER_B_CAPTURECOMPARE_REGISTER_1;
    param2.compareOutputMode = TIMER_B_OUTPUTMODE_TOGGLE_RESET;
    param2.dutyCycle = DUTY_CYCLE;
    Timer_B_outputPWM(TIMER_B1_BASE, &param2);

    ADC_startConversion(ADC_BASE, ADC_REPEATED_SINGLECHANNEL);
}

#if defined(__TI_COMPILER_VERSION__) || defined(__IAR_SYSTEMS_ICC__)
#pragma vector=TIMER0_B0_VECTOR
__interrupt
#elif defined(__GNUC__)
__attribute__((interrupt(TIMER0_B0_VECTOR)))
#endif
void TIMER0_B0_ISR(void)
{
    counter++;
    if (counter > period)
    {
        counter = 0;
        if (led1_dutycycle > 0) {
            GPIO_setOutputHighOnPin(GPIO_PORT_P1, GPIO_PIN0);
        }
        if (led2_dutycycle > 0) {
            GPIO_setOutputHighOnPin(GPIO_PORT_P6, GPIO_PIN6);
        }
    }

    if (counter == led1_dutycycle)
    {
        GPIO_setOutputLowOnPin(GPIO_PORT_P1, GPIO_PIN0);
    }

    if (counter == led2_dutycycle)
    {
        GPIO_setOutputLowOnPin(GPIO_PORT_P6, GPIO_PIN6);
    }
}

#if defined(__TI_COMPILER_VERSION__) || defined(__IAR_SYSTEMS_ICC__)
#pragma vector=PORT4_VECTOR
__interrupt void PORT4_ISR(void)
#elif defined(__GNUC__)
void __attribute__ ((interrupt(PORT4_VECTOR))) PORT_4_ISR (void)
#else
#error Compiler not supported!
#endif
{
    P4IFG &= ~BIT1;
    calibratedADC = lightsensor_ADC_Result;
}
